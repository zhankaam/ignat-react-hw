{"version":3,"sources":["p2-homeworks/h4/common/c2-SuperButton/SuperButton.tsx","p2-homeworks/h9/Clock.tsx","p2-homeworks/h9/HW9.tsx","p1-main/m1-ui/u1-app/App.tsx","serviceWorker.ts","index.tsx","p2-homeworks/h9/HW9.module.css","p2-homeworks/h4/common/c2-SuperButton/SuperButton.module.css","p1-main/m1-ui/u1-app/App.module.css"],"names":["SuperButton","red","restProps","className","finalClassName","s","default","Clock","useState","timerId","setTimerId","Date","date","setDate","show","setShow","stop","clearInterval","stringTime","toLocaleTimeString","stringDate","toLocaleDateString","time","onMouseEnter","onMouseLeave","data","onClick","id","window","setInterval","btnStart","btnStop","HW9","wrapper","title","container","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"2PA0BeA,EAhBqC,SAAC,GAK/C,IAHEC,EAGH,EAHGA,IACGC,GAEN,EAHQC,UAGR,oCACKC,EAAc,UAAMH,EAAMI,IAAEJ,IAAMI,IAAEC,SAE1C,OACI,oCACIH,UAAWC,GACPF,K,gBC+BDK,MAhDf,WAAkB,IAAD,EACiBC,mBAAiB,GADlC,mBACNC,EADM,KACGC,EADH,OAEWF,mBAAe,IAAIG,MAF9B,mBAENC,EAFM,KAEAC,EAFA,OAGWL,oBAAkB,GAH7B,mBAGNM,EAHM,KAGAC,EAHA,KAKPC,EAAO,WACTC,cAAcR,IAiBZS,EAAaN,EAAKO,qBAClBC,EAAaR,EAAKS,qBAExB,OACI,gCACI,qBAAKlB,UAAWE,IAAEiB,KACdC,aAbS,WACjBR,GAASD,IAaDU,aAXS,WACjBT,EAAQD,IAQJ,SAIKI,IAGJJ,GACG,qBAAKX,UAAWE,IAAEoB,KAAlB,SACKL,IAIH,cAAC,EAAD,CAAaM,QAjCb,WACVV,IACA,IAAMW,EAAaC,OAAOC,aAAY,WACjChB,EAAQ,IAAIF,QACd,KACHD,EAAWiB,IA4B4BxB,UAAWE,IAAEyB,SAA1C,mBACA,cAAC,EAAD,CAAaJ,QAASV,EAAMb,UAAWE,IAAE0B,QAAzC,sBCvBHC,MAnBf,WACI,OACI,sBAAK7B,UAAWE,IAAE4B,QAAlB,UACI,uBACA,oBAAI9B,UAAWE,IAAE6B,MAAjB,yBAGD,qBAAK/B,UAAWE,IAAE8B,UAAlB,SACI,cAAC,EAAD,UCkBAC,MAlBf,WACI,OACI,sBAAKjC,UAAWE,IAAE+B,IAAlB,UACI,mDAUC,cAAC,EAAD,QCbOC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,cAAC,IAAMC,WAAP,UACI,cAAC,EAAD,MAEJC,SAASC,eAAe,SDiItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a,kBEhJ5BC,EAAOC,QAAU,CAAC,MAAQ,mBAAmB,UAAY,uBAAuB,QAAU,qBAAqB,KAAO,kBAAkB,KAAO,oB,kBCA/ID,EAAOC,QAAU,CAAC,QAAU,6BAA6B,IAAM,2B,kBCA/DD,EAAOC,QAAU,CAAC,IAAM,oB","file":"static/js/main.1881c4be.chunk.js","sourcesContent":["import React, {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from \"./SuperButton.module.css\";\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>;\r\n\r\ntype SuperButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst SuperButton: React.FC<SuperButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${red ? s.red : s.default}`;\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    );\r\n}\r\n\r\nexport default SuperButton;\r\n","import React, {useState} from \"react\";\r\nimport SuperButton from \"../h4/common/c2-SuperButton/SuperButton\";\r\nimport s from \"./HW9.module.css\"\r\n\r\nfunction Clock() {\r\n    const [timerId, setTimerId] = useState<number>(0);\r\n    const [date, setDate] = useState<Date>(new Date());\r\n    const [show, setShow] = useState<boolean>(false);\r\n\r\n    const stop = () => {\r\n        clearInterval(timerId);\r\n    }\r\n    const start = () => {\r\n        stop();\r\n        const id: number = window.setInterval(() => {\r\n             setDate(new Date())\r\n        }, 1000);\r\n        setTimerId(id);\r\n    }\r\n\r\n    const onMouseEnter = () => {\r\n        setShow(!show) // show\r\n    };\r\n    const onMouseLeave = () => {\r\n        setShow(show) // close\r\n    };\r\n\r\n    const stringTime = date.toLocaleTimeString(); // fix with date\r\n    const stringDate = date.toLocaleDateString(); // fix with date\r\n\r\n    return (\r\n        <div>\r\n            <div className={s.time}\r\n                onMouseEnter={onMouseEnter}\r\n                onMouseLeave={onMouseLeave}\r\n            >\r\n                {stringTime}\r\n            </div>\r\n\r\n            {show && (\r\n                <div className={s.data}>\r\n                    {stringDate}\r\n                </div>\r\n            )}\r\n\r\n                  <SuperButton onClick={start} className={s.btnStart}>start</SuperButton>\r\n                  <SuperButton onClick={stop} className={s.btnStop}>stop</SuperButton>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Clock;\r\n","import React from \"react\";\r\nimport Clock from \"./Clock\";\r\nimport s from \"./HW9.module.css\"\r\n\r\nfunction HW9() {\r\n    return (\r\n        <div className={s.wrapper}>\r\n            <hr/>\r\n            <h3 className={s.title}>homeworks 9</h3>\r\n\r\n            {/*should work (должно работать)*/}\r\n           <div className={s.container}>\r\n               <Clock/>\r\n           </div>\r\n\r\n           {/* <hr/>*/}\r\n            {/*для личного творчества, могу проверить*/}\r\n            {/*<AlternativeClock/>*/}\r\n           {/* <hr/>*/}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default HW9;\r\n","import React from \"react\";\r\nimport s from \"./App.module.css\";\r\nimport HW1 from \"../../../p2-homeworks/h1/HW1\";\r\nimport HW2 from \"../../../p2-homeworks/h2/HW2\";\r\nimport HW3 from \"../../../p2-homeworks/h3/HW3\";\r\nimport HW4 from \"../../../p2-homeworks/h4/HW4\";\r\nimport HW5 from \"../../../p2-homeworks/h5/HW5\";\r\nimport HW6 from \"../../../p2-homeworks/h6/HW6\";\r\nimport HW7 from \"../../../p2-homeworks/h7/HW7\";\r\nimport HW8 from \"../../../p2-homeworks/h8/HW8\";\r\nimport HW9 from \"../../../p2-homeworks/h9/HW9\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={s.App}>\r\n            <div>react homeworks:</div>\r\n           {/* <HW1/>\r\n            <HW2/>\r\n            <HW3/>*/}\r\n            {/* eslint-disable-next-line react/jsx-no-undef */}\r\n         {/*   {<HW4/>}*/}\r\n            {/*{<HW5/>}*/}\r\n            {/*{<HW6/>}\r\n            {<HW7/>}*/}\r\n           {/* {<HW8/>}*/}\r\n            {<HW9/>}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./p1-main/m1-ui/u1-app/App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"HW9_title__caRCJ\",\"container\":\"HW9_container__LNG9_\",\"wrapper\":\"HW9_wrapper__3VpjO\",\"time\":\"HW9_time__3UmAS\",\"data\":\"HW9_data__10AfQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"SuperButton_default__2QE2a\",\"red\":\"SuperButton_red__3VB65\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__tJX_3\"};"],"sourceRoot":""}